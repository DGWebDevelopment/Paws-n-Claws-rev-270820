For this project I wanted to aim for the same functionality of the classic 'Naughts 'N' Crosses' game but with an alternative twist on the style.

HTML:
- I used HTML to structure the page with in-page CSS and a font imported from Google APIs which was used for the title. I used a table with individual cells to constitute the playing board and then created a form for each player to input their name. Each cell on the table has its own ID number used for styling (the first character is the row, starting from 0 as the top row, and then the second character is the collumn, starting from 0 as the lef furthest on the left).

Near the end of the HTML document I introduce the styling elements and error warning signs that will come into play as required by the Javascript functions (located within the Script tags at the very bottom of the body).

Javascript (I would recommend reading this in conjunction with the notes written on the actual Javascript file please):
- Part 1 of the main Javascript file generally sets the game up with the foundation variables. For example 'boardSize' dictates the size of the board that the game will be played on (boardSize = width = height). The reason I included this as it's own variable was in case in the future I added a function where the players could select the size of the board they wished to play on for a more difficult or easier playthrough.
- Part 2 is the Control Centre object which holds properties for important dynamic metrics that are constantly changing throughout the game (such as who's go is it currently, and to log the placed moves of each player). These properties are constantly used and compared throughout this application.
- Part 3 is used in conjunction with Part 4 to maniuplate the dom to make the text updates for the players reflect the current news. It can detect when the game has just started and the player is due to place their first move (hence the message: please place your first icon) and then can detect if a player is beyond making their first move. The relevant small logo is introduced by the subtext, to further indicate who's go it is so they can see at a glance.
- Part 5 is the function that processes whether both players have successfuly managed to put their names into the form, if they haven't then they will be warned by astericks and a red warning message, but if they have then this function will decide to take in the names submitted via the form and assign them to the relevant player name variable near the top. It will then run the function in part 6.
- Part 6 randomly picks one of the players to go first. It then kicks off the game by setting the 'hasGameStarted' variable to a value of True. It then changes the hover cursor of the board to be the pointer so the player knows that the game board is ready to be interacted with. The 'Submit' button (used by each player to submit their go) is then brought into the fray, as well as the option for whoever's go it is to use the Enter button on their keyboard instead.
- Part 7 introduces the hoveron function to each cell depending on who's go it is (the icon will hover as paws for the paws player if its their go, and vice versa).
- Pat 8 is the hoveroff function which does the opposite of the function in part 7(restores the cell's hover state to default).
- Part 9: this function is used with the hoveron and hoveroff functions in the 2 parts above (the styled state of the cell being hovered over is void if the active player has already clicked on that cell during this same go).
- Part 10's function is used in conjunction with part 11's function (blankOtherCells) when the player's who's go it is clicks on any of the cells which have not been clicked on by anyone in prior turns (the blankOtherCells function allows the active player to click around on more than one square during their go in case they are struggling to make their mind up as to where to go, this function will simply erase the graphic on the empty bos previously selected).
- Part 12 ( the processGo function) is activated when the active player selects the 'Submit' button during their go. First of all it filters whether the player has actually picked a cell and lets them know if they haven't, if they have successfuly picked a cell then the move is added onto their array of selections and then if the quantity of their moves is equal to more than the boardSize (ie. if there is a chance that they've got 3 in a row and could have won) the 'haveTheyWon' function in Part 13 is activated.
- Part 13: if for example the boardSize is 3: the haveTheyWon function first checks if the player has 3 inputs on the same horizontal row, if not then it will checker whether the player has 3 inputs on the same verticle collumn, and then if this is not the case then it will check if the player has 3 inputs in a straight diagonal line through the centre of the board. Finally; if nobody has won by the end of the game (ie. all 9 squares are filled with inputs but noone has managed to get a winning 3), then the players are alerted before the game automatically restarts.
- Part 14: the declareWinner function is called during Part 13 if a winner is to be found. It is an alert function that lets whoever just went that they have won the game and then tells them in how many gos they achieved it in. Pressing the ok button on this alert will cause the page to be reloaded and the game to restart.

